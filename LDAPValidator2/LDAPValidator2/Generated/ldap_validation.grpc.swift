//
// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the protocol buffer compiler.
// Source: ldap_validation.proto
//
import Foundation
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Usage: instantiate `Org_Signal_Registration_Ldap_Rpc_LdapValidationServiceClient`, then call methods of this protocol to make API calls.
public protocol Org_Signal_Registration_Ldap_Rpc_LdapValidationServiceClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Org_Signal_Registration_Ldap_Rpc_LdapValidationServiceClientInterceptorFactoryProtocol? { get }

  func validateCredentials(
    _ request: Org_Signal_Registration_Ldap_Rpc_ValidateCredentialsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Org_Signal_Registration_Ldap_Rpc_ValidateCredentialsRequest, Org_Signal_Registration_Ldap_Rpc_ValidateCredentialsResponse>
}

extension Org_Signal_Registration_Ldap_Rpc_LdapValidationServiceClientProtocol {
  public var serviceName: String {
    return "org.signal.registration.ldap.rpc.LdapValidationService"
  }

  /// Validates LDAP credentials and returns the associated phone number
  ///
  /// - Parameters:
  ///   - request: Request to send to ValidateCredentials.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func validateCredentials(
    _ request: Org_Signal_Registration_Ldap_Rpc_ValidateCredentialsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Org_Signal_Registration_Ldap_Rpc_ValidateCredentialsRequest, Org_Signal_Registration_Ldap_Rpc_ValidateCredentialsResponse> {
    return self.makeUnaryCall(
      path: Org_Signal_Registration_Ldap_Rpc_LdapValidationServiceClientMetadata.Methods.validateCredentials.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeValidateCredentialsInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Org_Signal_Registration_Ldap_Rpc_LdapValidationServiceClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Org_Signal_Registration_Ldap_Rpc_LdapValidationServiceNIOClient")
public final class Org_Signal_Registration_Ldap_Rpc_LdapValidationServiceClient: Org_Signal_Registration_Ldap_Rpc_LdapValidationServiceClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Org_Signal_Registration_Ldap_Rpc_LdapValidationServiceClientInterceptorFactoryProtocol?
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  public var interceptors: Org_Signal_Registration_Ldap_Rpc_LdapValidationServiceClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the org.signal.registration.ldap.rpc.LdapValidationService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Org_Signal_Registration_Ldap_Rpc_LdapValidationServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

public struct Org_Signal_Registration_Ldap_Rpc_LdapValidationServiceNIOClient: Org_Signal_Registration_Ldap_Rpc_LdapValidationServiceClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Org_Signal_Registration_Ldap_Rpc_LdapValidationServiceClientInterceptorFactoryProtocol?

  /// Creates a client for the org.signal.registration.ldap.rpc.LdapValidationService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Org_Signal_Registration_Ldap_Rpc_LdapValidationServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol Org_Signal_Registration_Ldap_Rpc_LdapValidationServiceAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Org_Signal_Registration_Ldap_Rpc_LdapValidationServiceClientInterceptorFactoryProtocol? { get }

  func makeValidateCredentialsCall(
    _ request: Org_Signal_Registration_Ldap_Rpc_ValidateCredentialsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Org_Signal_Registration_Ldap_Rpc_ValidateCredentialsRequest, Org_Signal_Registration_Ldap_Rpc_ValidateCredentialsResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Org_Signal_Registration_Ldap_Rpc_LdapValidationServiceAsyncClientProtocol {
  public static var serviceDescriptor: GRPCServiceDescriptor {
    return Org_Signal_Registration_Ldap_Rpc_LdapValidationServiceClientMetadata.serviceDescriptor
  }

  public var interceptors: Org_Signal_Registration_Ldap_Rpc_LdapValidationServiceClientInterceptorFactoryProtocol? {
    return nil
  }

  public func makeValidateCredentialsCall(
    _ request: Org_Signal_Registration_Ldap_Rpc_ValidateCredentialsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Org_Signal_Registration_Ldap_Rpc_ValidateCredentialsRequest, Org_Signal_Registration_Ldap_Rpc_ValidateCredentialsResponse> {
    return self.makeAsyncUnaryCall(
      path: Org_Signal_Registration_Ldap_Rpc_LdapValidationServiceClientMetadata.Methods.validateCredentials.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeValidateCredentialsInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Org_Signal_Registration_Ldap_Rpc_LdapValidationServiceAsyncClientProtocol {
  public func validateCredentials(
    _ request: Org_Signal_Registration_Ldap_Rpc_ValidateCredentialsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Org_Signal_Registration_Ldap_Rpc_ValidateCredentialsResponse {
    return try await self.performAsyncUnaryCall(
      path: Org_Signal_Registration_Ldap_Rpc_LdapValidationServiceClientMetadata.Methods.validateCredentials.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeValidateCredentialsInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public struct Org_Signal_Registration_Ldap_Rpc_LdapValidationServiceAsyncClient: Org_Signal_Registration_Ldap_Rpc_LdapValidationServiceAsyncClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Org_Signal_Registration_Ldap_Rpc_LdapValidationServiceClientInterceptorFactoryProtocol?

  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Org_Signal_Registration_Ldap_Rpc_LdapValidationServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

public protocol Org_Signal_Registration_Ldap_Rpc_LdapValidationServiceClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'validateCredentials'.
  func makeValidateCredentialsInterceptors() -> [ClientInterceptor<Org_Signal_Registration_Ldap_Rpc_ValidateCredentialsRequest, Org_Signal_Registration_Ldap_Rpc_ValidateCredentialsResponse>]
}

public enum Org_Signal_Registration_Ldap_Rpc_LdapValidationServiceClientMetadata {
  public static let serviceDescriptor = GRPCServiceDescriptor(
    name: "LdapValidationService",
    fullName: "org.signal.registration.ldap.rpc.LdapValidationService",
    methods: [
      Org_Signal_Registration_Ldap_Rpc_LdapValidationServiceClientMetadata.Methods.validateCredentials,
    ]
  )

  public enum Methods {
    public static let validateCredentials = GRPCMethodDescriptor(
      name: "ValidateCredentials",
      path: "/org.signal.registration.ldap.rpc.LdapValidationService/ValidateCredentials",
      type: GRPCCallType.unary
    )
  }
}

/// To build a server, implement a class that conforms to this protocol.
public protocol Org_Signal_Registration_Ldap_Rpc_LdapValidationServiceProvider: CallHandlerProvider {
  var interceptors: Org_Signal_Registration_Ldap_Rpc_LdapValidationServiceServerInterceptorFactoryProtocol? { get }

  /// Validates LDAP credentials and returns the associated phone number
  func validateCredentials(request: Org_Signal_Registration_Ldap_Rpc_ValidateCredentialsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Org_Signal_Registration_Ldap_Rpc_ValidateCredentialsResponse>
}

extension Org_Signal_Registration_Ldap_Rpc_LdapValidationServiceProvider {
  public var serviceName: Substring {
    return Org_Signal_Registration_Ldap_Rpc_LdapValidationServiceServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  public func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "ValidateCredentials":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Org_Signal_Registration_Ldap_Rpc_ValidateCredentialsRequest>(),
        responseSerializer: ProtobufSerializer<Org_Signal_Registration_Ldap_Rpc_ValidateCredentialsResponse>(),
        interceptors: self.interceptors?.makeValidateCredentialsInterceptors() ?? [],
        userFunction: self.validateCredentials(request:context:)
      )

    default:
      return nil
    }
  }
}

/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol Org_Signal_Registration_Ldap_Rpc_LdapValidationServiceAsyncProvider: CallHandlerProvider, Sendable {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Org_Signal_Registration_Ldap_Rpc_LdapValidationServiceServerInterceptorFactoryProtocol? { get }

  /// Validates LDAP credentials and returns the associated phone number
  func validateCredentials(
    request: Org_Signal_Registration_Ldap_Rpc_ValidateCredentialsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Org_Signal_Registration_Ldap_Rpc_ValidateCredentialsResponse
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Org_Signal_Registration_Ldap_Rpc_LdapValidationServiceAsyncProvider {
  public static var serviceDescriptor: GRPCServiceDescriptor {
    return Org_Signal_Registration_Ldap_Rpc_LdapValidationServiceServerMetadata.serviceDescriptor
  }

  public var serviceName: Substring {
    return Org_Signal_Registration_Ldap_Rpc_LdapValidationServiceServerMetadata.serviceDescriptor.fullName[...]
  }

  public var interceptors: Org_Signal_Registration_Ldap_Rpc_LdapValidationServiceServerInterceptorFactoryProtocol? {
    return nil
  }

  public func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "ValidateCredentials":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Org_Signal_Registration_Ldap_Rpc_ValidateCredentialsRequest>(),
        responseSerializer: ProtobufSerializer<Org_Signal_Registration_Ldap_Rpc_ValidateCredentialsResponse>(),
        interceptors: self.interceptors?.makeValidateCredentialsInterceptors() ?? [],
        wrapping: { try await self.validateCredentials(request: $0, context: $1) }
      )

    default:
      return nil
    }
  }
}

public protocol Org_Signal_Registration_Ldap_Rpc_LdapValidationServiceServerInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when handling 'validateCredentials'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeValidateCredentialsInterceptors() -> [ServerInterceptor<Org_Signal_Registration_Ldap_Rpc_ValidateCredentialsRequest, Org_Signal_Registration_Ldap_Rpc_ValidateCredentialsResponse>]
}

public enum Org_Signal_Registration_Ldap_Rpc_LdapValidationServiceServerMetadata {
  public static let serviceDescriptor = GRPCServiceDescriptor(
    name: "LdapValidationService",
    fullName: "org.signal.registration.ldap.rpc.LdapValidationService",
    methods: [
      Org_Signal_Registration_Ldap_Rpc_LdapValidationServiceServerMetadata.Methods.validateCredentials,
    ]
  )

  public enum Methods {
    public static let validateCredentials = GRPCMethodDescriptor(
      name: "ValidateCredentials",
      path: "/org.signal.registration.ldap.rpc.LdapValidationService/ValidateCredentials",
      type: GRPCCallType.unary
    )
  }
}
